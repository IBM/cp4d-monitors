{"version":3,"file":"component---src-pages-prometheus-index-mdx-beaff5647c255db57f1a.js","mappings":"4RAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,8NACA,8BAAgB,aAAGC,WAAW,IAC1B,KAAQ,mHADI,mHAAhB,2BAGA,2CACA,+MAAiM,sBAAYA,WAAW,KAAvB,yCAAjM,yBACA,wDACA,oBAAK,gBAAMA,WAAW,OAAjB,gNAWL,qDACA,oBAAK,gBAAMA,WAAW,OAAjB,6bAmBL,oGACA,oBAAK,gBAAMA,WAAW,OAAjB,kGAEL,0FACA,oBAAK,gBAAMA,WAAW,OAAjB,ibAkBL,+EACA,iFACA,oBAAK,gBAAMA,WAAW,OAAjB,oGAEL,mEACA,mNACA,6HACA,oBAAK,gBAAMA,WAAW,OAAjB,kXAsBTJ,EAAWK,gBAAiB","sources":["webpack://cloud-pak-deployer-monitors/./src/pages/prometheus/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/root/cp4d-monitors/doc/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`The following steps can be used to manually configure Prometheus on the OpenShift cluster and forward the IBM Cloud Pak for Data zen-watchdog events to the OpenShift prometheus using a ServiceMonitor.`}</p>\n    <p>{`Refer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.openshift.com/container-platform/4.8/monitoring/enabling-monitoring-for-user-defined-projects.html\"\n      }}>{`https://docs.openshift.com/container-platform/4.8/monitoring/enabling-monitoring-for-user-defined-projects.html`}</a>{` for more information.`}</p>\n    <h2>{`OpenShift Prometheus`}</h2>\n    <p>{`OpenShift Prometheus can be configured with (persist data after pod restart) or without (loose data after pod restart) a storageclass. When using IBM Cloud, it is recommended to use the `}<inlineCode parentName=\"p\">{`ibmc-vpc-block-retain-general-purpose`}</inlineCode>{` block storageclass.`}</p>\n    <h3>{`Configure without persisting data`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`cat << EOF | oc apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cluster-monitoring-config\n  namespace: openshift-monitoring\ndata:\n  config.yaml: |\n    enableUserWorkload: true\nEOF\n`}</code></pre>\n    <h3>{`Configure with persisting data`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`cat << EOF | oc apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cluster-monitoring-config\n  namespace: openshift-monitoring\ndata:\n  config.yaml: |\n    enableUserWorkload: true\n    prometheusK8s: \n      volumeClaimTemplate:\n       spec:\n         storageClassName: ibmc-vpc-block-retain-general-purpose\n         volumeMode: Filesystem\n         resources:\n           requests:\n             storage: 40Gi  \nEOF  \n`}</code></pre>\n    <p>{`Using either methods, afterwards, wait for the Prometheus to completely start:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc wait -n openshift-monitoring --for=condition=Ready pod -l app=prometheus --timeout=300s\n`}</code></pre>\n    <h3>{`(Optional) Configure User Workload monitoring to use a storageclass`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`cat << EOF | oc apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: user-workload-monitoring-config\n  namespace: openshift-user-workload-monitoring\ndata:\n  config.yaml: |\n    prometheus:\n      volumeClaimTemplate:\n        spec:\n          storageClassName: ibmc-vpc-block-retain-general-purpose\n          volumeMode: Filesystem\n          resources:\n            requests:\n              storage: 40Gi\nEOF\n`}</code></pre>\n    <h2>{`Wait for User Workload monitoring to complete deployment`}</h2>\n    <p>{`Ensure the User Workload monitoring finishes its deployment`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc wait -n openshift-user-workload-monitoring --for=condition=Ready pod --all --timeout=600s\n`}</code></pre>\n    <h2>{`Create IBM Cloud Pak for Data ServiceMonitor`}</h2>\n    <p>{`Now that Prometheus is setup completely, the IBM Cloud Pak for Data zen-watchdog can be configured to forward its events to OpenShift prometheus. This is implemented using a ServiceMonitor:`}</p>\n    <p>{`Replace `}{`<`}{`CP4D_PROJECT`}{`>`}{` with the OpenShift project where IBM Cloud Pak for Data is deployed.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cat << EOF | oc apply -f -\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  namespace: <CP4D_PROJECT>\n  labels:\n    k8s-app: zen-watchdog-service-monitor\n  name: zen-watchdog\nspec:\n  endpoints:\n    - interval: 30s\n      port: zenwatchdog-notls\n      scheme: http\n  selector:\n    matchLabels:\n      component: zen-watchdog\nEOF\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}