{
    "componentChunkName": "component---src-pages-monitors-cp-4-d-wml-deployment-space-info-manual-index-mdx",
    "path": "/monitors/cp4d-wml-deployment-space-info/manual/",
    "result": {"pageContext":{"frontmatter":{"title":"Manual Deployment of Watson Machine Learning Deployment Space Information"},"relativePagePath":"/monitors/cp4d-wml-deployment-space-info/manual/index.mdx","titleType":"page","MdxNode":{"id":"b0b8ef76-23a6-5aca-b702-cc6842a1aa94","children":[],"parent":"8a01f278-d1ba-5cde-9dfe-349e5fecdfed","internal":{"content":"---\ntitle: Manual Deployment of Watson Machine Learning Deployment Space Information\n---\n\nThis page will go through all manual steps to deploy the Watson Machine Learning Deployment Space Information monitor, and in addition to delete it. \n\nThe following pre-requisites are assumed:\n- IBM Cloud Pak for Data is successfully deployed\n- (Optional) Prometheus is configured. Refer to [setup OpenShift Prometheus and Cloud Pak for Data ServiceMonitor](/prometheus/) for instructions\n\nThis manual deployment will be based on:\n- Source of the Monitor is located in a Git Repository\n- The Image will be pushed to the internal OpenShift Image Registry \n\n## Deploy Watson Machine Learning Deployment Space Information\n\n### Build the Monitor Image and push to the registry\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport OPENSHIFT_IMAGE_REGISTRY=image-registry.openshift-image-registry.svc:5000/${CP4D_PROJECT}\n\noc new-build https://github.com/IBM/cp4d-monitors \\\n --context-dir cp4d-wml-deployment-space-info  \\\n --name cp4d-platform-wml-deployment-space-info \\\n --to ${OPENSHIFT_IMAGE_REGISTRY}/cp4d-platform-wml-deployment-space-info:latest \\\n --to-docker=true \\\n --namespace ${CP4D_PROJECT}\n```\n\nWait for the build to complete successfully\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc wait -n ${CP4D_PROJECT} --for=condition=Complete build/cp4d-platform-wml-deployment-space-info-1  --timeout=300s\n```\nor to monitor the build process:\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc logs -n ${CP4D_PROJECT} build/cp4d-platform-wml-deployment-space-info-1 -f\n```\nEnsure the build finishes with the message `Push successful`\n\n### Create the Cloud Pak for Data zen-watchdog monitor configuration\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport OPENSHIFT_IMAGE_REGISTRY=image-registry.openshift-image-registry.svc:5000/${CP4D_PROJECT}\n\ncat << EOF | oc apply -f -\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: zen-alert-cp4d-platform-wml-deployment-space-info-monitor-extension\n  labels:\n    app: zen-adv\n    icpdata_addon: 'true'\n    icpdata_addon_version: 4.3.0\n    release: zen-adv\ndata:\n  extensions: |\n    [\n      {\n        \"extension_point_id\": \"zen_alert_monitor\",\n        \"extension_name\": \"zen_alert_cp4d_platform_wml_deployment_space_info\",\n        \"display_name\": \"Watson Machine Learning Deployment Space Info\",\n        \"details\": {\n          \"name\": \"cp4d-platform-wml-deployment-space-info\",\n          \"image\": \"${OPENSHIFT_IMAGE_REGISTRY}/cp4d-platform-wml-deployment-space-info:latest\",\n          \"schedule\": \"*/15 * * * *\",\n          \"event_types\": [\n            {\n              \"name\": \"cp4d_wml_deployment_space_info_overall_count\",\n              \"simple_name\": \"Watson Machine Learning Deployment Space Info Overall Count\",\n              \"alert_type\": \"platform\",\n              \"short_description\": \"CP4D Watson Machine Learning Deployment Space Info Overall Count\",\n              \"long_description\": \"CP4D Watson Machine Learning Deployment Space Info Overall Count: <cp4d_wml_deployment_space_info_overall_count>\",                \n              \"resolution\": \"none\",\n              \"reason_code_prefix\": \"80\"\n            },              \n            {\n              \"name\": \"cp4d_wml_deployment_space_deployed_count\",\n              \"simple_name\": \"Watson Machine Learning Deployment Space Deployed Count\",\n              \"alert_type\": \"platform\",\n              \"short_description\": \"CP4D Watson Machine Learning Deployment Space Deployed Count\",\n              \"long_description\": \"CP4D Watson Machine Learning Deployment Space Deployed Count: <cp4d_wml_deployment_space_deployed_count>\",\n              \"resolution\": \"none\",\n              \"reason_code_prefix\": \"80\"\n            },\n            {\n              \"name\": \"cp4d_wml_deployment_space_deployed_fail_count\",\n              \"simple_name\": \"Watson Machine Learning Deployment Space Deployed Fail Count\",\n              \"alert_type\": \"platform\",\n              \"short_description\": \"CP4D Watson Machine Learning Deployment Space Deployed Fail Count\",\n              \"long_description\": \"CP4D Watson Machine Learning Deployment Space Deployed Fail Count: <cp4d_wml_deployment_space_deployed_fail_count>\",                \n              \"resolution\": \"none\",\n              \"reason_code_prefix\": \"80\"\n            },\n            {\n              \"name\": \"cp4d_wml_deployment_space_deployed_count_online\",\n              \"simple_name\": \"Watson Machine Learning Deployment Space Deployed Count\",\n              \"alert_type\": \"platform\",\n              \"short_description\": \"CP4D Watson Machine Learning Deployment Space Online Deployed Count\",\n              \"long_description\": \"CP4D Watson Machine Learning Deployment Space Online Deployed Count: <cp4d_wml_deployment_space_deployed_count_online>\",\n              \"resolution\": \"none\",\n              \"reason_code_prefix\": \"80\"\n            },\n            {\n              \"name\": \"cp4d_wml_deployment_space_deployed_count_batch\",\n              \"simple_name\": \"Watson Machine Learning Deployment Space Deployed Fail Count\",\n              \"alert_type\": \"platform\",\n              \"short_description\": \"CP4D Watson Machine Learning Deployment Space Batch Deployed Count\",\n              \"long_description\": \"CP4D Watson Machine Learning Deployment Space Batch Deployed Count: <cp4d_wml_deployment_space_deployed_count_batch>\",                \n              \"resolution\": \"none\",\n              \"reason_code_prefix\": \"80\"\n            }            \n          ]\n        }\n      }\n    ]\nEOF\n```\n**Note:** Once the ConfigMap above is created, the zen-watcher pod will detect it. Please check the log of zen-watcher pod for details. For example:\n```\n\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport ZEN_WATCHER_POD=$(oc get po -l component=zen-watcher -o custom-columns=CONTAINER:.metadata.name --no-headers)\noc logs ${ZEN_WATCHER_POD}\n\ntime=\"2022-05-31 03:07:56\" level=info msg=processConfigData event=\"adding extensions from zen-alert-cp4d-platform-wml-deployment-space-info-monitor-extension to the database\"\ntime=\"2022-05-31 03:07:56\" level=info msg=CleanUpStaleExtensions event=\"upgrade extensions: removing stale extensions from zen-alert-cp4d-platform-wml-deployment-space-info-monitor-extension to the database\"\ntime=\"2022-05-31 03:07:56\" level=info msg=processExtensionHandler event=\"processing action: create for extension\" extension_name=zen_alert_cp4d_wml_deployment_space_info\ntime=\"2022-05-31 03:07:56\" level=info msg=watchConfigMap event=\"config zen-alert-cp4d-platform-wml-deployment-space-info-monitor-extension added\"\n```\n\n### Wait for zen-watchdog to create cronjob\n\nGet the watchdog-alert-monitoring-cronjob cronjob details of Cloud Pak for Data\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\n\noc get cronjob watchdog-alert-monitoring-cronjob -n ${CP4D_PROJECT}\n\nNAME                                SCHEDULE       SUSPEND   ACTIVE   LAST SCHEDULE   AGE\nwatchdog-alert-monitoring-cronjob   */10 * * * *   False     0        3m46s           7d3h\n```\nThis cronjob must run in order for the Watson Studio Job cronjob to be created. Optionally the schedule can be changed to trigger its execution. The pod zen-watchdog can be monitored for any error messages:\n```\n\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport ZEN_WATCHDOG_POD=$(oc get po -n ${CP4D_PROJECT} -l component=zen-watchdog -o custom-columns=CONTAINER:.metadata.name --no-headers)\n\noc logs -n ${CP4D_PROJECT} ${ZEN_WATCHDOG_POD} -f\n```\n\nThe new monitor cronjob is created:\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc get cronjob -n ${CP4D_PROJECT}\n\nNAME                                              SCHEDULE       SUSPEND   ACTIVE   LAST SCHEDULE   AGE\ncp4d-platform-wml-deployment-space-info-cronjob   */15 * * * *   False     0        <none>          6s\n```\n\nMost monitors require access to the Cloud Pak for Data /user-home folder to cache information. To test whether this mount point is already present on the monitor use the following command:\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport CP4D_CRONJOB=cp4d-platform-wml-deployment-space-info-cronjob\noc set volume -n ${CP4D_PROJECT} cronjobs/${CP4D_CRONJOB} | grep \"mounted at /user-home\" | wc -l\n```\nIf the result is `0`, patch the cronjob using the following command:\n```\noc patch cronjob -n ${CP4D_PROJECT} ${CP4D_CRONJOB} \\\n--type=json \\\n--patch '[{\"op\": \"add\",\"path\": \"/spec/jobTemplate/spec/template/spec/containers/0/volumeMounts/-\",\"value\": {\"name\": \"user-home-mount\",\"mountPath\": \"/user-home\"}}]'\n```\n\n\nBased on the schedule the cronjob will be executed. This will create a pod, which can be monitored:\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc logs -n ${CP4D_PROJECT} <PODNAME>\n```\n\n## Rebuilding the image\nWhen changes are applied to the monitor, restarting the Build Config will re-build and push the image to the image registry. No other changed are required. The next time the cronjob is executed, the new version of the monitor image will be used\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport CP4D_CRONJOB=cp4d-platform-wml-deployment-space-info-cronjob\n\noc start-build -n ${CP4D_PROJECT} cp4d-platform-wml-deployment-space-info                                  \n```\nMonitor the build using (use -2, -3 etc, based on the created build by the previous command):\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc logs -n ${CP4D_PROJECT} build/cp4d-platform-wml-deployment-space-info-2 -f\n```\nPatch the cronjob so it will Always pull the image to ensure it will fetch the latest version once triggered\n```\noc patch cronjob -n ${CP4D_PROJECT} ${CP4D_CRONJOB} \\\n  --type=json \\\n  --patch '[{\"op\":\"replace\",\"path\":\"/spec/jobTemplate/spec/template/spec/containers/0/imagePullPolicy\",\"value\":\"Always\"}]'\n```\n\n## Remove the Monitor\n\nUse the following commands to delete the monitor\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport CP4D_CRONJOB=cp4d-platform-wml-deployment-space-info-cronjob\noc delete bc -n ${CP4D_PROJECT} cp4d-platform-wml-deployment-space-info\noc delete cm -n ${CP4D_PROJECT} zen-alert-cp4d-platform-wml-deployment-space-info-monitor-extension \noc delete cronjob -n ${CP4D_PROJECT} ${CP4D_CRONJOB} \noc delete cm -n ${CP4D_PROJECT} cp4d-monitor-configuration\n```\n**Note:** Please only delete the configmap cp4d-monitor-configuration if no other monitors are deployed. The configmap cp4d-monitor-configuration is generated by monitor. When monitor is deployed and scheduled to run, it will create the configmap with its default values.\n\n```\n\"cp4d-job-last-refresh\" : \"0\"\n\"cp4d-job-refresh-interval-minutes\": \"120\"\n\"cp4d-project-last-refresh\": \"0\"\n\"cp4d-project-refresh-interval-minutes\": \"240\"\n\"cp4d-space-last-refresh\": \"0\"\n\"cp4d-space-refresh-interval-minutes\": \"120\"\n\"cp4d-wkc-last-refresh\": \"0\"\n\"cp4d-wkc-refresh-interval-minutes\": \"120\"\n```\n\n## Reset Cloud Pak for Data metrics configuration and influxdb\nIf, during development, the zen-watchdog is unable to process events because of an incorrect configuration or naming convention, using the following steps to reset the zen-watchdog and its influxdb\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc project ${CP4D_PROJECT}\n\noc exec -it zen-metastoredb-0 /bin/bash\ncp -r /certs/ /tmp/\ncd /tmp/ && chmod -R 0700 certs/\ncd /cockroach \n./cockroach sql --certs-dir=/tmp/certs/ --host=zen-metastoredb-0.zen-metastoredb\nuse zen;\ndrop table policies;\ndrop table products;\ndrop table monitors;\ndrop table monitor_events;\ndrop table event_types;\nexit\n\noc delete cronjob watchdog-alert-monitoring-cronjob watchdog-alert-monitoring-purge-cronjob zen-watchdog-cronjob diagnostics-cronjob\noc delete pod -l component=zen-watchdog\n```\nWait for the cronjobs to be re-created\n\nAcquire the Password for influxdb, and copy it.\n```\noc extract secret/dsx-influxdb-auth --keys=influxdb-password --to=-\n```\n\nDelete the influxdb entries\n```\noc exec -it dsx-influxdb-0 bash\ninflux -ssl -unsafeSsl\nauth\n<enter>admin\n\nDelete the events\n\nuse WATCHDOG;\ndrop measurement events;\n```","type":"Mdx","contentDigest":"3232a9233c598db21f179ac0ca5cf206","owner":"gatsby-plugin-mdx","counter":152},"frontmatter":{"title":"Manual Deployment of Watson Machine Learning Deployment Space Information"},"exports":{},"rawBody":"---\ntitle: Manual Deployment of Watson Machine Learning Deployment Space Information\n---\n\nThis page will go through all manual steps to deploy the Watson Machine Learning Deployment Space Information monitor, and in addition to delete it. \n\nThe following pre-requisites are assumed:\n- IBM Cloud Pak for Data is successfully deployed\n- (Optional) Prometheus is configured. Refer to [setup OpenShift Prometheus and Cloud Pak for Data ServiceMonitor](/prometheus/) for instructions\n\nThis manual deployment will be based on:\n- Source of the Monitor is located in a Git Repository\n- The Image will be pushed to the internal OpenShift Image Registry \n\n## Deploy Watson Machine Learning Deployment Space Information\n\n### Build the Monitor Image and push to the registry\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport OPENSHIFT_IMAGE_REGISTRY=image-registry.openshift-image-registry.svc:5000/${CP4D_PROJECT}\n\noc new-build https://github.com/IBM/cp4d-monitors \\\n --context-dir cp4d-wml-deployment-space-info  \\\n --name cp4d-platform-wml-deployment-space-info \\\n --to ${OPENSHIFT_IMAGE_REGISTRY}/cp4d-platform-wml-deployment-space-info:latest \\\n --to-docker=true \\\n --namespace ${CP4D_PROJECT}\n```\n\nWait for the build to complete successfully\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc wait -n ${CP4D_PROJECT} --for=condition=Complete build/cp4d-platform-wml-deployment-space-info-1  --timeout=300s\n```\nor to monitor the build process:\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc logs -n ${CP4D_PROJECT} build/cp4d-platform-wml-deployment-space-info-1 -f\n```\nEnsure the build finishes with the message `Push successful`\n\n### Create the Cloud Pak for Data zen-watchdog monitor configuration\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport OPENSHIFT_IMAGE_REGISTRY=image-registry.openshift-image-registry.svc:5000/${CP4D_PROJECT}\n\ncat << EOF | oc apply -f -\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: zen-alert-cp4d-platform-wml-deployment-space-info-monitor-extension\n  labels:\n    app: zen-adv\n    icpdata_addon: 'true'\n    icpdata_addon_version: 4.3.0\n    release: zen-adv\ndata:\n  extensions: |\n    [\n      {\n        \"extension_point_id\": \"zen_alert_monitor\",\n        \"extension_name\": \"zen_alert_cp4d_platform_wml_deployment_space_info\",\n        \"display_name\": \"Watson Machine Learning Deployment Space Info\",\n        \"details\": {\n          \"name\": \"cp4d-platform-wml-deployment-space-info\",\n          \"image\": \"${OPENSHIFT_IMAGE_REGISTRY}/cp4d-platform-wml-deployment-space-info:latest\",\n          \"schedule\": \"*/15 * * * *\",\n          \"event_types\": [\n            {\n              \"name\": \"cp4d_wml_deployment_space_info_overall_count\",\n              \"simple_name\": \"Watson Machine Learning Deployment Space Info Overall Count\",\n              \"alert_type\": \"platform\",\n              \"short_description\": \"CP4D Watson Machine Learning Deployment Space Info Overall Count\",\n              \"long_description\": \"CP4D Watson Machine Learning Deployment Space Info Overall Count: <cp4d_wml_deployment_space_info_overall_count>\",                \n              \"resolution\": \"none\",\n              \"reason_code_prefix\": \"80\"\n            },              \n            {\n              \"name\": \"cp4d_wml_deployment_space_deployed_count\",\n              \"simple_name\": \"Watson Machine Learning Deployment Space Deployed Count\",\n              \"alert_type\": \"platform\",\n              \"short_description\": \"CP4D Watson Machine Learning Deployment Space Deployed Count\",\n              \"long_description\": \"CP4D Watson Machine Learning Deployment Space Deployed Count: <cp4d_wml_deployment_space_deployed_count>\",\n              \"resolution\": \"none\",\n              \"reason_code_prefix\": \"80\"\n            },\n            {\n              \"name\": \"cp4d_wml_deployment_space_deployed_fail_count\",\n              \"simple_name\": \"Watson Machine Learning Deployment Space Deployed Fail Count\",\n              \"alert_type\": \"platform\",\n              \"short_description\": \"CP4D Watson Machine Learning Deployment Space Deployed Fail Count\",\n              \"long_description\": \"CP4D Watson Machine Learning Deployment Space Deployed Fail Count: <cp4d_wml_deployment_space_deployed_fail_count>\",                \n              \"resolution\": \"none\",\n              \"reason_code_prefix\": \"80\"\n            },\n            {\n              \"name\": \"cp4d_wml_deployment_space_deployed_count_online\",\n              \"simple_name\": \"Watson Machine Learning Deployment Space Deployed Count\",\n              \"alert_type\": \"platform\",\n              \"short_description\": \"CP4D Watson Machine Learning Deployment Space Online Deployed Count\",\n              \"long_description\": \"CP4D Watson Machine Learning Deployment Space Online Deployed Count: <cp4d_wml_deployment_space_deployed_count_online>\",\n              \"resolution\": \"none\",\n              \"reason_code_prefix\": \"80\"\n            },\n            {\n              \"name\": \"cp4d_wml_deployment_space_deployed_count_batch\",\n              \"simple_name\": \"Watson Machine Learning Deployment Space Deployed Fail Count\",\n              \"alert_type\": \"platform\",\n              \"short_description\": \"CP4D Watson Machine Learning Deployment Space Batch Deployed Count\",\n              \"long_description\": \"CP4D Watson Machine Learning Deployment Space Batch Deployed Count: <cp4d_wml_deployment_space_deployed_count_batch>\",                \n              \"resolution\": \"none\",\n              \"reason_code_prefix\": \"80\"\n            }            \n          ]\n        }\n      }\n    ]\nEOF\n```\n**Note:** Once the ConfigMap above is created, the zen-watcher pod will detect it. Please check the log of zen-watcher pod for details. For example:\n```\n\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport ZEN_WATCHER_POD=$(oc get po -l component=zen-watcher -o custom-columns=CONTAINER:.metadata.name --no-headers)\noc logs ${ZEN_WATCHER_POD}\n\ntime=\"2022-05-31 03:07:56\" level=info msg=processConfigData event=\"adding extensions from zen-alert-cp4d-platform-wml-deployment-space-info-monitor-extension to the database\"\ntime=\"2022-05-31 03:07:56\" level=info msg=CleanUpStaleExtensions event=\"upgrade extensions: removing stale extensions from zen-alert-cp4d-platform-wml-deployment-space-info-monitor-extension to the database\"\ntime=\"2022-05-31 03:07:56\" level=info msg=processExtensionHandler event=\"processing action: create for extension\" extension_name=zen_alert_cp4d_wml_deployment_space_info\ntime=\"2022-05-31 03:07:56\" level=info msg=watchConfigMap event=\"config zen-alert-cp4d-platform-wml-deployment-space-info-monitor-extension added\"\n```\n\n### Wait for zen-watchdog to create cronjob\n\nGet the watchdog-alert-monitoring-cronjob cronjob details of Cloud Pak for Data\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\n\noc get cronjob watchdog-alert-monitoring-cronjob -n ${CP4D_PROJECT}\n\nNAME                                SCHEDULE       SUSPEND   ACTIVE   LAST SCHEDULE   AGE\nwatchdog-alert-monitoring-cronjob   */10 * * * *   False     0        3m46s           7d3h\n```\nThis cronjob must run in order for the Watson Studio Job cronjob to be created. Optionally the schedule can be changed to trigger its execution. The pod zen-watchdog can be monitored for any error messages:\n```\n\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport ZEN_WATCHDOG_POD=$(oc get po -n ${CP4D_PROJECT} -l component=zen-watchdog -o custom-columns=CONTAINER:.metadata.name --no-headers)\n\noc logs -n ${CP4D_PROJECT} ${ZEN_WATCHDOG_POD} -f\n```\n\nThe new monitor cronjob is created:\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc get cronjob -n ${CP4D_PROJECT}\n\nNAME                                              SCHEDULE       SUSPEND   ACTIVE   LAST SCHEDULE   AGE\ncp4d-platform-wml-deployment-space-info-cronjob   */15 * * * *   False     0        <none>          6s\n```\n\nMost monitors require access to the Cloud Pak for Data /user-home folder to cache information. To test whether this mount point is already present on the monitor use the following command:\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport CP4D_CRONJOB=cp4d-platform-wml-deployment-space-info-cronjob\noc set volume -n ${CP4D_PROJECT} cronjobs/${CP4D_CRONJOB} | grep \"mounted at /user-home\" | wc -l\n```\nIf the result is `0`, patch the cronjob using the following command:\n```\noc patch cronjob -n ${CP4D_PROJECT} ${CP4D_CRONJOB} \\\n--type=json \\\n--patch '[{\"op\": \"add\",\"path\": \"/spec/jobTemplate/spec/template/spec/containers/0/volumeMounts/-\",\"value\": {\"name\": \"user-home-mount\",\"mountPath\": \"/user-home\"}}]'\n```\n\n\nBased on the schedule the cronjob will be executed. This will create a pod, which can be monitored:\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc logs -n ${CP4D_PROJECT} <PODNAME>\n```\n\n## Rebuilding the image\nWhen changes are applied to the monitor, restarting the Build Config will re-build and push the image to the image registry. No other changed are required. The next time the cronjob is executed, the new version of the monitor image will be used\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport CP4D_CRONJOB=cp4d-platform-wml-deployment-space-info-cronjob\n\noc start-build -n ${CP4D_PROJECT} cp4d-platform-wml-deployment-space-info                                  \n```\nMonitor the build using (use -2, -3 etc, based on the created build by the previous command):\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc logs -n ${CP4D_PROJECT} build/cp4d-platform-wml-deployment-space-info-2 -f\n```\nPatch the cronjob so it will Always pull the image to ensure it will fetch the latest version once triggered\n```\noc patch cronjob -n ${CP4D_PROJECT} ${CP4D_CRONJOB} \\\n  --type=json \\\n  --patch '[{\"op\":\"replace\",\"path\":\"/spec/jobTemplate/spec/template/spec/containers/0/imagePullPolicy\",\"value\":\"Always\"}]'\n```\n\n## Remove the Monitor\n\nUse the following commands to delete the monitor\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\nexport CP4D_CRONJOB=cp4d-platform-wml-deployment-space-info-cronjob\noc delete bc -n ${CP4D_PROJECT} cp4d-platform-wml-deployment-space-info\noc delete cm -n ${CP4D_PROJECT} zen-alert-cp4d-platform-wml-deployment-space-info-monitor-extension \noc delete cronjob -n ${CP4D_PROJECT} ${CP4D_CRONJOB} \noc delete cm -n ${CP4D_PROJECT} cp4d-monitor-configuration\n```\n**Note:** Please only delete the configmap cp4d-monitor-configuration if no other monitors are deployed. The configmap cp4d-monitor-configuration is generated by monitor. When monitor is deployed and scheduled to run, it will create the configmap with its default values.\n\n```\n\"cp4d-job-last-refresh\" : \"0\"\n\"cp4d-job-refresh-interval-minutes\": \"120\"\n\"cp4d-project-last-refresh\": \"0\"\n\"cp4d-project-refresh-interval-minutes\": \"240\"\n\"cp4d-space-last-refresh\": \"0\"\n\"cp4d-space-refresh-interval-minutes\": \"120\"\n\"cp4d-wkc-last-refresh\": \"0\"\n\"cp4d-wkc-refresh-interval-minutes\": \"120\"\n```\n\n## Reset Cloud Pak for Data metrics configuration and influxdb\nIf, during development, the zen-watchdog is unable to process events because of an incorrect configuration or naming convention, using the following steps to reset the zen-watchdog and its influxdb\n\n```\nexport CP4D_PROJECT=<CP4D_PROJECT>\noc project ${CP4D_PROJECT}\n\noc exec -it zen-metastoredb-0 /bin/bash\ncp -r /certs/ /tmp/\ncd /tmp/ && chmod -R 0700 certs/\ncd /cockroach \n./cockroach sql --certs-dir=/tmp/certs/ --host=zen-metastoredb-0.zen-metastoredb\nuse zen;\ndrop table policies;\ndrop table products;\ndrop table monitors;\ndrop table monitor_events;\ndrop table event_types;\nexit\n\noc delete cronjob watchdog-alert-monitoring-cronjob watchdog-alert-monitoring-purge-cronjob zen-watchdog-cronjob diagnostics-cronjob\noc delete pod -l component=zen-watchdog\n```\nWait for the cronjobs to be re-created\n\nAcquire the Password for influxdb, and copy it.\n```\noc extract secret/dsx-influxdb-auth --keys=influxdb-password --to=-\n```\n\nDelete the influxdb entries\n```\noc exec -it dsx-influxdb-0 bash\ninflux -ssl -unsafeSsl\nauth\n<enter>admin\n\nDelete the events\n\nuse WATCHDOG;\ndrop measurement events;\n```","fileAbsolutePath":"/root/yefei/cp4d-monitors/doc/src/pages/monitors/cp4d-wml-deployment-space-info/manual/index.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}