{
    "componentChunkName": "component---src-pages-prometheus-index-mdx",
    "path": "/prometheus/",
    "result": {"pageContext":{"frontmatter":{"title":"Setup Prometheus and Cloud Pak for Data Service Monitor"},"relativePagePath":"/prometheus/index.mdx","titleType":"page","MdxNode":{"id":"47ac80e7-c0d9-5553-8230-ec898d11b21a","children":[],"parent":"c20cc22b-c04f-5501-a296-dc32bb6b9c54","internal":{"content":"---\ntitle: Setup Prometheus and Cloud Pak for Data Service Monitor\n---\n\nThe following steps can be used to manually configure Prometheus on the OpenShift cluster and forward the IBM Cloud Pak for Data zen-watchdog events to the OpenShift prometheus using a ServiceMonitor.\n\nRefer to https://docs.openshift.com/container-platform/4.8/monitoring/enabling-monitoring-for-user-defined-projects.html for more information.\n\n## OpenShift Prometheus\n\nOpenShift Prometheus can be configured with (persist data after pod restart) or without (loose data after pod restart) a storageclass. When using IBM Cloud, it is recommended to use the `ibmc-vpc-block-retain-general-purpose` block storageclass.\n\n### Configure without persisting data\n```\ncat << EOF | oc apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cluster-monitoring-config\n  namespace: openshift-monitoring\ndata:\n  config.yaml: |\n    enableUserWorkload: true\nEOF\n```\n\n### Configure with persisting data\n```\ncat << EOF | oc apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cluster-monitoring-config\n  namespace: openshift-monitoring\ndata:\n  config.yaml: |\n    enableUserWorkload: true\n    prometheusK8s: \n      volumeClaimTemplate:\n       spec:\n         storageClassName: ibmc-vpc-block-retain-general-purpose\n         volumeMode: Filesystem\n         resources:\n           requests:\n             storage: 40Gi  \nEOF  \n```\n\nUsing either methods, afterwards, wait for the Prometheus to completely start:\n```\noc wait -n openshift-monitoring --for=condition=Ready pod -l app=prometheus --timeout=300s\n```\n\n### (Optional) Configure User Workload monitoring to use a storageclass\n\n```\ncat << EOF | oc apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: user-workload-monitoring-config\n  namespace: openshift-user-workload-monitoring\ndata:\n  config.yaml: |\n    prometheus:\n      volumeClaimTemplate:\n        spec:\n          storageClassName: ibmc-vpc-block-retain-general-purpose\n          volumeMode: Filesystem\n          resources:\n            requests:\n              storage: 40Gi\nEOF\n```\n\n## Wait for User Workload monitoring to complete deployment\n\nEnsure the User Workload monitoring finishes its deployment\n\n```\noc wait -n openshift-user-workload-monitoring --for=condition=Ready pod --all --timeout=600s\n```\n\n## Create IBM Cloud Pak for Data ServiceMonitor\nNow that Prometheus is setup completely, the IBM Cloud Pak for Data zen-watchdog can be configured to forward its events to OpenShift prometheus. This is implemented using a ServiceMonitor:\n\nReplace &lt;CP4D_PROJECT&gt; with the OpenShift project where IBM Cloud Pak for Data is deployed.\n\n```\ncat << EOF | oc apply -f -\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  namespace: <CP4D_PROJECT>\n  labels:\n    k8s-app: zen-watchdog-service-monitor\n  name: zen-watchdog\nspec:\n  endpoints:\n    - interval: 30s\n      port: zenwatchdog-notls\n      scheme: http\n  selector:\n    matchLabels:\n      component: zen-watchdog\nEOF\n```","type":"Mdx","contentDigest":"a7b485f3719cc280ab2b081c906234f0","owner":"gatsby-plugin-mdx","counter":126},"frontmatter":{"title":"Setup Prometheus and Cloud Pak for Data Service Monitor"},"exports":{},"rawBody":"---\ntitle: Setup Prometheus and Cloud Pak for Data Service Monitor\n---\n\nThe following steps can be used to manually configure Prometheus on the OpenShift cluster and forward the IBM Cloud Pak for Data zen-watchdog events to the OpenShift prometheus using a ServiceMonitor.\n\nRefer to https://docs.openshift.com/container-platform/4.8/monitoring/enabling-monitoring-for-user-defined-projects.html for more information.\n\n## OpenShift Prometheus\n\nOpenShift Prometheus can be configured with (persist data after pod restart) or without (loose data after pod restart) a storageclass. When using IBM Cloud, it is recommended to use the `ibmc-vpc-block-retain-general-purpose` block storageclass.\n\n### Configure without persisting data\n```\ncat << EOF | oc apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cluster-monitoring-config\n  namespace: openshift-monitoring\ndata:\n  config.yaml: |\n    enableUserWorkload: true\nEOF\n```\n\n### Configure with persisting data\n```\ncat << EOF | oc apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cluster-monitoring-config\n  namespace: openshift-monitoring\ndata:\n  config.yaml: |\n    enableUserWorkload: true\n    prometheusK8s: \n      volumeClaimTemplate:\n       spec:\n         storageClassName: ibmc-vpc-block-retain-general-purpose\n         volumeMode: Filesystem\n         resources:\n           requests:\n             storage: 40Gi  \nEOF  \n```\n\nUsing either methods, afterwards, wait for the Prometheus to completely start:\n```\noc wait -n openshift-monitoring --for=condition=Ready pod -l app=prometheus --timeout=300s\n```\n\n### (Optional) Configure User Workload monitoring to use a storageclass\n\n```\ncat << EOF | oc apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: user-workload-monitoring-config\n  namespace: openshift-user-workload-monitoring\ndata:\n  config.yaml: |\n    prometheus:\n      volumeClaimTemplate:\n        spec:\n          storageClassName: ibmc-vpc-block-retain-general-purpose\n          volumeMode: Filesystem\n          resources:\n            requests:\n              storage: 40Gi\nEOF\n```\n\n## Wait for User Workload monitoring to complete deployment\n\nEnsure the User Workload monitoring finishes its deployment\n\n```\noc wait -n openshift-user-workload-monitoring --for=condition=Ready pod --all --timeout=600s\n```\n\n## Create IBM Cloud Pak for Data ServiceMonitor\nNow that Prometheus is setup completely, the IBM Cloud Pak for Data zen-watchdog can be configured to forward its events to OpenShift prometheus. This is implemented using a ServiceMonitor:\n\nReplace &lt;CP4D_PROJECT&gt; with the OpenShift project where IBM Cloud Pak for Data is deployed.\n\n```\ncat << EOF | oc apply -f -\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  namespace: <CP4D_PROJECT>\n  labels:\n    k8s-app: zen-watchdog-service-monitor\n  name: zen-watchdog\nspec:\n  endpoints:\n    - interval: 30s\n      port: zenwatchdog-notls\n      scheme: http\n  selector:\n    matchLabels:\n      component: zen-watchdog\nEOF\n```","fileAbsolutePath":"/home/alaimbock/cp4d-monitors/doc/src/pages/prometheus/index.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}